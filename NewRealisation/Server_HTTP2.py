import grpc
from concurrent import futures
import micro_payment_pb2 as pb2
import micro_payment_pb2_grpc as pb2_grpc
import time
import threading 
class BankSimulator:
    def __init__(self):
        self.balance = 1000000  # –±–∞–ª–∞–Ω—Å –≤ –∫–æ–ø–µ–π–∫–∞—Ö (10 000 —Ä—É–±.)
        self.hold_amount = 0
        self.lock = threading.Lock()

    def make_hold(self, amount_kopecks):
        with self.lock:
            if self.balance >= amount_kopecks:
                self.hold_amount += amount_kopecks
                self.balance -= amount_kopecks
                print(f"‚úÖ –•–æ–ª–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount_kopecks / 100} —Ä—É–±.")
                return True
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ö–æ–ª–¥–∞")
                return False

    def release_hold(self):
        with self.lock:
            released = self.hold_amount
            self.hold_amount = 0
            print(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {released / 100} —Ä—É–±.")
            return released

    def get_balance(self):
        with self.lock:
            return self.balance

bank = BankSimulator()
sessions = {}

class MicroPaymentServicer(pb2_grpc.MicroPaymentServiceServicer):
    def StreamPayments(self, request_iterator, context):
        session_id = None
        for req in request_iterator:
            session_id = req.session_id
            amount = req.amount_cents

            if session_id not in sessions:
                sessions[session_id] = {
                    "total": 0,
                    "hold": 10000,  # 100 —Ä—É–±–ª–µ–π
                    "used": 0
                }
                print(f"[SERVER] –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {session_id}")

            session = sessions[session_id]

            if session["used"] + amount > session["hold"]:
                print("[SERVER] –•–æ–ª–¥ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π")
                bank.release_hold()
                bank.make_hold(10000)
                session["hold"] = 10000
                session["used"] = 0

            session["used"] += amount
            session["total"] += amount

            print(f"[SERVER] –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {amount / 100} —Ä—É–±. –ò—Ç–æ–≥–æ: {session['total'] / 100} —Ä—É–±.")

            yield pb2.PaymentResponse(
                success=True,
                total_charged=session["total"],
                remaining_hold=session["hold"] - session["used"]
            )

        print(f"[SERVER] –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}. –ò—Ç–æ–≥–æ: {session['total'] / 100} —Ä—É–±.")
        del sessions[session_id]
        bank.release_hold()


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    pb2_grpc.add_MicroPaymentServiceServicer_to_server(MicroPaymentServicer(), server)
    server.add_insecure_port('[::]:50051')
    print("[SERVER] gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 50051...")
    server.start()
    server.wait_for_termination()

if __name__ == '__main__':
    serve()