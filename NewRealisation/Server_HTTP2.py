import grpc
from concurrent import futures
import micro_payment_pb2 as pb2
import micro_payment_pb2_grpc as pb2_grpc
import threading
import sqlite3

def init_db():
    conn = sqlite3.connect('gas_stations.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS gas_stations (
                      station_id INTEGER PRIMARY KEY,
                      name TEXT NOT NULL,
                      location TEXT NOT NULL,
                      fuel_type TEXT NOT NULL,
                      price_per_liter REAL NOT NULL)''')

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    stations = [
        (1, "–õ—É–∫–æ–π–ª", "–ú–æ—Å–∫–≤–∞", "–ê–ò-95", 54.30),
        (2, "–ì–∞–∑–ø—Ä–æ–º", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ê–ò-92", 52.70),
        (3, "–†–æ—Å–Ω–µ—Ñ—Ç—å", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–î–¢", 56.80),
        (4, "–¢–∞—Ç–Ω–µ—Ñ—Ç—å", "–ö–∞–∑–∞–Ω—å", "–ê–ò-98", 59.50)
    ]
    cursor.executemany("INSERT OR IGNORE INTO gas_stations VALUES (?, ?, ?, ?, ?)", stations)
    conn.commit()
    conn.close()

def get_fuel_price(station_id):
    conn = sqlite3.connect('gas_stations.db')
    cursor = conn.cursor()
    cursor.execute("SELECT price_per_liter FROM gas_stations WHERE station_id=?", (station_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

class BankSimulator:
    def __init__(self):
        self.balance = 1000000  # 10 000 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        self.holds = {}  # {session_id: amount_kopecks}
        self.lock = threading.Lock()

    def make_hold(self, session_id, amount_kopecks):
        with self.lock:
            if self.balance >= amount_kopecks:
                self.holds[session_id] = amount_kopecks
                self.balance -= amount_kopecks
                print(f"‚úÖ –•–æ–ª–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({session_id}): {amount_kopecks / 100} —Ä—É–±.")
                return True
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ö–æ–ª–¥–∞")
                return False

    def release_hold(self, session_id):
        with self.lock:
            released = self.holds.pop(session_id, 0)
            self.balance += released
            print(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ({session_id}): {released / 100} —Ä—É–±.")
            return released


bank = BankSimulator()
sessions = {}


class MicroPaymentServicer(pb2_grpc.MicroPaymentServiceServicer):
    def StreamPayments(self, request_iterator, context):
        session_id = None

        for req in request_iterator:
            session_id = req.session_id
            station_id = req.station_id
            amount_liters = req.amount_liters  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –ª–∏—Ç—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            price_per_liter = get_fuel_price(station_id)
            if not price_per_liter:
                context.set_code(grpc.StatusCode.NOT_FOUND)
                context.set_details(f"–ó–∞–ø—Ä–∞–≤–∫–∞ —Å ID {station_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return pb2.PaymentResponse(success=False)

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–ø–µ–π–∫–∏: 1 —Ä—É–±–ª—å = 100 –∫–æ–ø–µ–µ–∫
            amount_cents = int(amount_liters * price_per_liter * 100)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Å–µ—Å—Å–∏—è
            if session_id in sessions:
                session = sessions[session_id]
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ —Å—Ç–∞–≤–∏–º —Ö–æ–ª–¥
                sessions[session_id] = {
                    "total": 0,
                    "hold": 10000,  # 100 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    "used": 0
                }
                success = bank.make_hold(session_id, 10000)
                if not success:
                    context.set_code(grpc.StatusCode.RESOURCE_EXHAUSTED)
                    context.set_details("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ–ª–¥")
                    return pb2.PaymentResponse(success=False)

            session = sessions[session_id]

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–ª–¥ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –µ–≥–æ –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            if session["used"] + amount_cents > session["hold"]:
                print("[SERVER] –•–æ–ª–¥ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π")
                bank.release_hold(session_id)
                bank.make_hold(session_id, 10000)
                session["hold"] = 10000
                session["used"] = 0

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session["used"] += amount_cents
            session["total"] += amount_cents

            print(f"[SERVER] –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {amount_cents / 100} —Ä—É–±. ({amount_liters} –ª.). –ò—Ç–æ–≥–æ: {session['total'] / 100} —Ä—É–±.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            yield pb2.PaymentResponse(
                success=True,
                total_charged=session["total"],
                remaining_hold=session["hold"] - session["used"]
            )

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ ‚Äî –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if session_id:
            print(f"[SERVER] –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}. –ò—Ç–æ–≥–æ: {session['total'] / 100} —Ä—É–±.")
            del sessions[session_id]
            bank.release_hold(session_id)
def serve():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    with open('server.key', 'rb') as f:
        private_key = f.read()
    with open('server.crt', 'rb') as f:
        certificate_chain = f.read()

    server_credentials = grpc.ssl_server_credentials(
        [(private_key, certificate_chain)],
        root_certificates=None,
        require_client_auth=False
    )

    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    pb2_grpc.add_MicroPaymentServiceServicer_to_server(MicroPaymentServicer(), server)
    server.add_secure_port('[::]:50051', server_credentials)
    print("üöÄ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 50051 (TLS/SSL)")
    server.start()
    server.wait_for_termination()


if __name__ == '__main__':
    init_db()  # <-- –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    serve()