from flask import Flask, render_template, jsonify, request
import grpc
import threading
import time
import micro_payment_pb2 as pb2
import micro_payment_pb2_grpc as pb2_grpc

app = Flask(__name__)

# === –≠–º—É–ª—è—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
class BankAccount:
    def __init__(self, user_id, initial_balance_kopecks):
        self.user_id = user_id
        self.balance = initial_balance_kopecks  # –í—Å—ë —Ö—Ä–∞–Ω–∏–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        self.hold = 0
        self.used_hold = 0
        self.lock = threading.Lock()

    def get_balance(self):
        with self.lock:
            return self.balance / 100

    def make_hold(self, amount_kopecks):
        with self.lock:
            if self.balance >= amount_kopecks:
                self.hold += amount_kopecks
                self.balance -= amount_kopecks
                self.used_hold = 0
                print(f"‚úÖ –•–æ–ª–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount_kopecks / 100} —Ä—É–±.")
                return True
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ö–æ–ª–¥–∞")
                return False

    def charge_from_hold(self, amount_kopecks):
        with self.lock:
            if self.used_hold + amount_kopecks > self.hold:
                return False
            self.used_hold += amount_kopecks
            return True

    def release_hold(self):
        with self.lock:
            released = self.hold - self.used_hold
            self.balance += released
            print(f"üîì –†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ: {released / 100} —Ä—É–±.")
            self.hold = 0
            self.used_hold = 0
            return released

    def get_total_hold(self):
        return self.hold / 100

    def get_used_hold(self):
        return self.used_hold / 100

    def get_remaining_hold(self):
        return (self.hold - self.used_hold) / 100


# === –ö–ª–∞—Å—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å–µ—Ä–≤–∏—Å –∏–ª–∏ –±–∞–Ω–∫) ===
class RecipientAccount:
    def __init__(self, user_id):
        self.user_id = user_id
        self.balance = 0.0  # –≤ —Ä—É–±–ª—è—Ö

    def deposit(self, amount_rub):
        self.balance += amount_rub
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {amount_rub:.2f} —Ä—É–±. –ë–∞–ª–∞–Ω—Å: {self.balance:.2f} —Ä—É–±.")

    def get_balance(self):
        return self.balance


# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
bank_account = BankAccount(user_id="user1", initial_balance_kopecks=1000000)  # 10000 —Ä—É–±–ª–µ–π
recipient_account = RecipientAccount(user_id="service_owner")
stub = None
session_id = ""
total_used = 0.0  # –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —Ä—É–±–ª—è—Ö
stop_streaming = threading.Event()
real_time_data = {"used": 0.0, "balance": 0.0}


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É ===
def connect_to_grpc():
    global stub
    try:
        channel = grpc.insecure_channel('localhost:50051')
        grpc.channel_ready_future(channel).result(timeout=5)
        stub = pb2_grpc.MicroPaymentServiceStub(channel)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC: {e}")
        stub = None
        return False


# === –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π ===
def streaming_process(session_id):
    global total_used, real_time_data
    base_amount_kopecks = 10  # 10 –∫–æ–ø–µ–µ–∫ –∑–∞ —à–∞–≥
    hold_amount_kopecks = 10000  # 100 —Ä—É–±–ª–µ–π

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–ª–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if bank_account.hold == 0:
        success = bank_account.make_hold(hold_amount_kopecks)
        if not success:
            print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ–ª–¥")
            stop_streaming.set()
            return

    while not stop_streaming.is_set():
        # –ï—Å–ª–∏ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 2/3 —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–ª–¥–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        if bank_account.get_used_hold() >= bank_account.get_total_hold() * 2 / 3:
            print("üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ö–æ–ª–¥")
            bank_account.release_hold()
            bank_account.make_hold(hold_amount_kopecks)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ —Ö–æ–ª–¥–∞
        if bank_account.charge_from_hold(base_amount_kopecks):
            real_time_data["used"] += base_amount_kopecks / 100
            real_time_data["balance"] = bank_account.get_balance()
            print(f"üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {base_amount_kopecks / 100} —Ä—É–±. "
                  f"–û—Å—Ç–∞–ª–æ—Å—å –≤ —Ö–æ–ª–¥–µ: {bank_account.get_remaining_hold()} —Ä—É–±.")

            try:
                stub.StreamPayments(iter([
                    pb2.PaymentRequest(session_id=session_id, amount_cents=base_amount_kopecks)
                ]))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e)
                stop_streaming.set()
                break
        else:
            print("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ö–æ–ª–¥–µ")
            stop_streaming.set()
            break

        time.sleep(0.005)

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ö–æ–ª–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    print("üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞—Ç–æ–∫ —Ö–æ–ª–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω.")
    bank_account.release_hold()


# === API –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/start', methods=['POST'])
def start_session():
    global session_id, stop_streaming
    session_id = f"sess_{int(time.time())}"
    stop_streaming.clear()
    threading.Thread(target=streaming_process, args=(session_id,), daemon=True).start()
    return jsonify({"session_id": session_id})


@app.route('/stop', methods=['POST'])
def stop_session():
    stop_streaming.set()
    return jsonify({"status": "stopped"})


@app.route('/status', methods=['GET'])
def status():
    return jsonify({
        "balance": round(bank_account.get_balance(), 2),
        "hold": round(bank_account.get_total_hold(), 2),
        "used": round(bank_account.get_used_hold(), 2),
        "remaining": round(bank_account.get_remaining_hold(), 2),
        "needs_new_hold": bank_account.get_used_hold() >= bank_account.get_total_hold() * 2 / 3,
        "total_used": round(real_time_data["used"], 2)
    })


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    connect_to_grpc()
    app.run(debug=True, port=5000)